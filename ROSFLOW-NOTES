
***************************************************************************************
FLOW: -> WriterProxy()
***************************************************************************************
) StatefulReder.cpp
matched_writer_add() ->

bool StatefulReader::matched_writer_add(RemoteWriterAttributes& wdata)



) WriterProxy.cpp

WriterProxy::WriterProxy(const RemoteWriterAttributes& watt,
        StatefulReader* SR)






***************************************************************************************
FLOW: createWriter->createSendResources->build_send_resources->OpenOutputChannel
***************************************************************************************
) RTPSParticipantImpl.cpp

These two function calls createSendResources with just one parameter
createWriter->createSendResources->build_send_resources->OpenOutputChannel
createReader->createSendResources->build_send_resources->OpenOutputChannel

bool RTPSParticipantImpl::createWriter(
        RTPSWriter** WriterOut,
        WriterAttributes& param,
        WriterHistory* hist,
        WriterListener* listen,
        const EntityId_t& entityId,
        bool isBuiltin)

bool RTPSParticipantImpl::createReader(
        RTPSReader** ReaderOut,
        ReaderAttributes& param,
        ReaderHistory* hist,
        ReaderListener* listen,
        const EntityId_t& entityId,
        bool isBuiltin,
        bool enable)


) RTPSParticipantImpl.cpp

These two function calls createSendResources->build_send_resources->OpenOutputChannel

bool RTPSParticipantImpl::createSendResources(Endpoint *pend)
void RTPSParticipantImpl::createSenderResources(LocatorList_t& Locator_list, bool ApplyMutation)


) NetworkFactory.cpp

This calls UDPTransportInterface->OpenOutputChannel

bool NetworkFactory::build_send_resources(
        SendResourceList& sender_resource_list,
        const Locator_t& locator)


) UDPTransportInterface.cpp
This is responsible for creating socket.
TODO!
what is unicast and multicast?

bool UDPTransportInterface::OpenOutputChannel(
        SendResourceList& sender_resource_list,
        const Locator_t& locator)




***************************************************************************************
FLOW: OpenOutputChannel
***************************************************************************************

) NetworkFactory.cpp

This calls UDPTransportInterface->OpenOutputChannel

bool NetworkFactory::build_send_resources(
        SendResourceList& sender_resource_list,
        const Locator_t& locator)



***************************************************************************************
FLOW: UDPTransportInterface::send()
UDPSenderResource()->UDPTransportInterface::send()
***************************************************************************************

) UDPSenderResource.hpp
UDPSenderResource(
        UDPTransportInterface& transport,
        eProsimaUDPSocket& socket,
        bool only_multicast_purpose = false)
    : SenderResource(transport.kind())
    , socket_(moveSocket(socket))
    , only_multicast_purpose_(only_multicast_purpose)


) UDPTransportInterface.cpp

bool UDPTransportInterface::send(
        const octet* send_buffer,
        uint32_t send_buffer_size,
        eProsimaUDPSocket& socket,
        const Locator_t& remote_locator,
        bool only_multicast_purpose)


